extends Node2D

"""This demo shows how to evolve arcade-style cars to successfully complete a track.
This is accomplished by assigning fitness based on how many degrees around the track
a car has driven, and regularly starting a new generation where the fittest individuals
are more prevalent.

New generations are started based on a timer (generation_step), because a lot of
cars end up just loitering around the track, and I haven't implemented a method
to detect this yet. This may cause successful agents to be stopped prematurely however.
"""
var first = true
# 1.0 = one second. time gets reset every time_step, then all agents get updated
var time = 0
# total_time gets reset every time a new generation is started
var total_time = 0
# every time_step the cars network takes sensory information and decides how to act
var time_step = 0.2
# every generation_step a new generation is made. this gets increased over time.
var generation_step = 15

# path to the car scene that will be controlled by the AI
var agent_body_path = "res://demos/cars/car/Car.tscn"
# initialize the main node that handles the genetic algorithm with 11 inputs, 4 outputs
# the path to the car scene, enable the NEAT_Gui, and use the car_params parameters, which
# are saved under user://param_configs

onready var tree = preload("res://NEAT_usability/gui/graph/tree.tscn")


#old config: car_params
var ga = GeneticAlgorithm.new(18, 4, agent_body_path, true, "Custom_Evolution_Config")

# chosen track. Tracks are numbered, however the car_splash refers to them by difficulty
var curr_track_num: int
# end the demo when the first car reaches this. TAU (360 degrees) = complete one track
#var fitness_threshold = TAU + 1

#Changed for food foraging so it never ends:
var fitness_threshold = 250
var num = 0

# a splash screen on how to continue after reaching fitness threshold
onready var DemoCompletedSplash = preload("res://demos/demo_loader/DemoCompletedSplash.tscn")
# while the splashscreen is open, do not continue the genetic algorithm
var paused = true

# when the first car reaches the halfway checkpoint, the generation time gets increased
var first_car_reached_checkpoint = false

func load_track(track_num: int) -> void:
	"""Loads the selected track, adds the GeneticAlgorithm node as a child and places
	the agent_bodies at the starting position of the track.
	"""
	curr_track_num = track_num
	# load the selected track
	var track_path = "res://demos/cars/tracks/track_%s/Track_%s.tscn" % [track_num, track_num]
	add_child(load(track_path).instance())
	# connect a signal to increase the generation_step once the first car reaches HalfLap
	# IMPORTANT add the ga node as a child
	add_child(ga)
	# get the bodies (agent_body_path instances) generated by the ga, and place them on the track
	place_bodies(ga.get_curr_bodies())
		
	# Center the camera on the starting position
	$ZoomPanCam.global_position = $Track/Start.global_position
	paused = false



func _physics_process(delta) -> void:
	"""Car agents update their networks every time_step seconds, and then drive
	according to the networks output. If generation_step time has passed, start a
	new generation.
	"""
	if not paused:
		if first:
			first = false
			$Track/Food_Spawner.spawn_food(25)
		
		num += 1
		if num > 40:
			$Track/Food_Spawner.spawn_food(4)
			num = 0
	
		# update time since last update
		time += delta; total_time += delta
		# if enough time has passed for the next time_step, update all agents
		if time > time_step:
			ga.next_timestep()
			time = 0
		# check if enough time has passed to start a new generation
		if total_time > generation_step or ga.all_agents_dead:
			
				
			# check if the best agent exceeded the fitness threshold
			ga.evaluate_generation()
			if ga.curr_best.fitness > fitness_threshold:
				# either resume with next generation or switch to demo-choosing scene
				end_car_demo()
			# go to the next gen
			ga.next_generation()
			
#			if $Track/Food_Spawner:
#				$Track/Food_Spawner.spawn_food(200)
			
			place_bodies(ga.get_curr_bodies())
			# every x gens, increase the generation_step
			if ga.curr_generation % 2 == 0:
				generation_step += 6
				print("increased step to " + str(generation_step))
			total_time = 0


func place_bodies(bodies: Array) -> void:
	"""Adds the bodies scenes generated by the ga to the tree, and removes the old ones.
	"""


			
	# add the new bodies to the track
	for body in bodies:
		if not body in $Track/Start.get_children():
			$Track/Start.add_child(body)
		
#	Doin the same for food:
	if $Track/Food_Spawner:
		for bushes in $Track/Food_Spawner.get_children():
			for leftover_food in bushes.get_children():
				leftover_food.queue_free()
		if !first:
			$Track/Food_Spawner.spawn_food(max(int(25-(float(generation_step)/8)),5))
			
#	for agent in ga.curr_agents:
#		print(agent.species)
#		print(alive_members)
	for species in ga.curr_species:
		if not species.obliterate:
#			print("------------")
#			print(species.species_id)
#			print(species.color)
			for member in species.alive_members:
#				print(member.agent.body.get_node("Sprite").modulate)
#				if member.agent.is_dead:
#					member.agent.body.queue_free()
				if !member.agent.is_dead:
					member.agent.body.get_node("Sprite").modulate = species.color

#				print(member.total_time)
#	var species_index = 0
#	for species in ga.curr_species:
#		if not species.obliterate:
#			curr_species_dict[species_index] = species
#			species_list.add_item("species_" + species.species_id)
#			species_index += 1


	# remove the bodies from the last generation
#	for last_gen_body in $Track/Start.get_children():
#		if last_gen_body.get_node("Sprite").visible == false:
#			last_gen_body.queue_free()


func increase_time(_body) -> void:
	"""Dependant on the chosen track, this method increases the generation_step
	such that capable generations are not terminated prematurely.
	"""
	if not first_car_reached_checkpoint:
		match curr_track_num:
			1:
				generation_step = 100
			2:
				generation_step = 70
			3:
				generation_step = 60
		first_car_reached_checkpoint = true


func end_car_demo() -> void:
	"""Open the DemoCompletedSplash.
	"""
	paused = true
	var demo_completed_splash = DemoCompletedSplash.instance()
	demo_completed_splash.initialize(ga, fitness_threshold)
	demo_completed_splash.connect("set_new_threshold", self, "continue_ga")
	add_child(demo_completed_splash)


func continue_ga(new_threshold) -> void:
	"""Continue the evolution until new_threshold is reached.
	"""
	fitness_threshold = new_threshold
	paused = false


func get_everyone() -> Array:
	return ga.all_genomes

#Generate family tree:
func _unhandled_input(event):
	if event is InputEventKey and event.pressed:
		if event.scancode == KEY_ENTER:
			print("GENOMES: ", len(ga.all_genomes))
			$Track/FamilyTree.cycle(ga.all_genomes)
			pass



